from flask import Flask, render_template, request, redirect
import cloudinary
import cloudinary.uploader
import cloudinary.api
import os
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

app = Flask(__name__)

# Cloudinary configuration
cloudinary.config(
    cloud_name=os.getenv('CLOUD_NAME'),
    api_key=os.getenv('API_KEY'),
    api_secret=os.getenv('API_SECRET'),
    secure=True
)

@app.route("/", methods=["GET", "POST"])
def index():
    if request.method == "POST":
        # Check if a file is uploaded
        if "file" not in request.files:
            return "No file uploaded"
        file = request.files["file"]
        
        if file.filename == "":
            return "No selected file"

        prompt = request.form.get("prompt")

        # Upload file to Cloudinary
        upload_result = cloudinary.uploader.upload(file)

        if prompt:
            # Remove background based on prompt
            remove_bg_url = cloudinary.CloudinaryImage(upload_result['public_id']).build_url(
                effect=f"bgremoval:{prompt}",
                crop="fill"
            )
            return render_template("index.html", upload_result=upload_result, remove_bg_url=remove_bg_url)
        
        return render_template("index.html", upload_result=upload_result)
    
    return render_template("index.html")


@app.route("/optimize/<public_id>")
def optimize(public_id):
    # Optimize image
    optimized_url = cloudinary.CloudinaryImage(public_id).build_url(
        fetch_format="auto", quality="auto"
    )
    return render_template("optimize.html", optimized_url=optimized_url)


@app.route("/transform/<public_id>")
def transform(public_id):
    # Transform image
    transform_url = cloudinary.CloudinaryImage(public_id).build_url(
        width=500, height=500, crop="fill", gravity="auto"
    )
    return render_template("transform.html", transform_url=transform_url)


if __name__ == "__main__":
    app.run(debug=True)
